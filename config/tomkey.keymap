#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    macros {
        winalts: winalts {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_WIN &kp LEFT_SHIFT &kp S>;
            label = "WINALTS";
        };

        section4: section4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HASH &kp HASH &kp HASH &kp HASH>;
            label = "SECTION4";
        };

        text1: text1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(X) &kp LS(M) &kp N2 &kp N7 &kp N5 &kp N4 &kp N7 &kp TAB>;
            label = "TEXT1";
        };

        text2: text2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(A) &kp W &kp A &kp W &kp A &kp N &kp N>;
            label = "TEXT2";
        };

        text3: text3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp K &kp E &kp T &kp A &kp M &kp E &kp AT &kp ENTER>;
            label = "TEXT3";
        };
    };

    combos {
        compatible = "zmk,combos";

        ID {
            bindings = <&text1>;
            key-positions = <5 26>;
        };

        Pass1 {
            bindings = <&text2>;
            key-positions = <6 26>;
        };

        Pass3 {
            bindings = <&text3>;
            key-positions = <26 7>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E             &kp R           &kp T                                                     &kp Y            &kp U  &kp I      &kp O    &kp P
&kp A      &kp S         &kp D             &kp F           &kp G        &mo 6                     &kp BACKSLASH      &kp H            &kp J  &kp K      &kp L    &kp MINUS
&kp Z      &kp X         &kp C             &kp V           &kp B        &kp LS(LEFT_BRACKET)      &kp RIGHT_BRACKET  &kp N            &kp M  &kp COMMA  &kp DOT  &lt 2 SLASH
&kp LCTRL  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp LEFT_SHIFT  &lt 4 SPACE  &kp SPACE                 &kp ENTER          &lt 3 BACKSPACE                             &lt 5 ESCAPE
            >;
        };

        MOUSE {
            bindings = <
&trans     &trans        &trans            &trans          &trans                      &trans  &trans    &trans    &trans    &trans
&trans     &trans        &trans            &trans          &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans     &trans        &trans            &trans          &trans  &trans      &trans  &trans  &trans    &trans    &to 0     &trans
&kp LCTRL  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp LEFT_SHIFT  &trans  &trans      &trans  &mo 3                                 &trans
            >;
        };

        SCROLL {
            bindings = <
&kp ESCAPE  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans      &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp F12     &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp F12     &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        ARROW {
            bindings = <
&kp GRAVE     &kp LC(LS(TAB))         &kp LG(RIGHT)   &kp LANGUAGE_1           &kp LANGUAGE_2                                     &trans   &kp RC(LEFT_ARROW)  &kp UP_ARROW      &kp RC(RIGHT_ARROW)  &kp LG(P)
&kp TAB       &kp LA(LG(LEFT_ARROW))  &kp LG(LEFT)    &kp LG(LA(RIGHT_ARROW))  &kp LA(N8)      &kp LEFT_BRACKET      &trans       &trans   &kp LEFT_ARROW      &kp DOWN_ARROW    &kp RIGHT_ARROW      &kp LG(K)
&kp LCMD      &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &kp LA(N9)      &trans                &kp LS(TAB)  &kp TAB  &trans              &kp LC(UP_ARROW)  &trans               &kp LG(L)
&kp LEFT_ALT  &trans                  &kp LEFT_SHIFT  &trans                   &trans          &trans                &trans       &trans                                                              &trans
            >;
        };

        NUM {
            bindings = <
&kp GRAVE                   &kp NUMBER_7  &kp NUMBER_8  &kp N9        &kp PLUS                                         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SEMICOLON  &kp SEMICOLON
&kp SLASH                   &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp ASTERISK  &kp AMPS           &kp QUESTION    &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp SLASH      &kp LS(N7)
&mt LEFT_SHIFT KP_NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD    &kp LG(SPACE)      &kp LANGUAGE_2  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp COLON      &kp LS(MINUS)
&trans                      &trans        &trans        &trans        &trans        &trans             &trans          &kp NUMBER_0                                             &kp LS(INT_RO)
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &tog 1  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        layer_6 {
            bindings = <
&kp LG(Q)      &kp LC(W)  &trans     &trans     &section4                          &bt BT_PRV  &bt BT_NXT  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&kp LG(LS(Z))  &trans     &kp LC(C)  &trans     &kp LS(LG(S))  &trans      &trans  &bt BT_CLR  &trans      &trans        &trans        &trans
&kp LG(Z)      &kp LG(X)  &kp LG(C)  &kp LG(V)  &trans         &trans      &trans  &trans      &trans      &trans        &trans        &trans
&trans         &trans     &trans     &trans     &trans         &trans      &trans  &trans                                              &trans
            >;
        };
    };
};
